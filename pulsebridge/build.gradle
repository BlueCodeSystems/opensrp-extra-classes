plugins {
    id 'com.android.library'
    id 'maven-publish'
}

android {
    namespace 'org.bluecodesystems.pulsebridge'
    compileSdk rootProject.ext.compileSdk

    defaultConfig {
        minSdk rootProject.ext.minSdk
        targetSdk rootProject.ext.targetSdk
        consumerProguardFiles 'consumer-rules.pro'
    }

    buildTypes {
        release {
            minifyEnabled false
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    publishing {
        singleVariant('release') {
            withSourcesJar()
        }
    }
}

configurations.configureEach {
    resolutionStrategy {
        force 'com.commonsware.cwac:saferoom.x:1.3.0'
        force 'androidx.appcompat:appcompat:1.6.1'
        force 'androidx.appcompat:appcompat-resources:1.6.1'
        force 'androidx.core:core:1.12.0'
        force 'androidx.recyclerview:recyclerview:1.3.2'
        force 'com.google.android.material:material:1.10.0'

        dependencySubstitution {
            substitute module('org.smartregister:android-p2p-sync') using module('io.github.bluecodesystems:android-p2p-sync:0.4.1')
            substitute module('org.smartregister:opensrp-plan-evaluator') using module('io.github.bluecodesystems:opensrp-plan-evaluator:1.7.0')
        }

        capabilitiesResolution.withCapability('com.google.guava:listenablefuture') { details ->
            details.select('com.google.guava:guava:31.1-android')
        }

        eachDependency { details ->
            if (details.requested.group == 'com.commonsware.cwac' && details.requested.name == 'saferoom') {
                details.useTarget('com.commonsware.cwac:saferoom.x:1.3.0')
            }
        }
    }
}

afterEvaluate {
    publishing {
        publications {
            create('release', MavenPublication) {
                from components.release
                groupId = (project.findProperty('GROUP') ?: project.group ?: 'org.example')
                artifactId = (project.findProperty('POM_SETTING_ARTIFACT_ID') ?: project.name)
                version = (project.findProperty('VERSION_NAME') ?: project.version ?: '0.0.1-SNAPSHOT')
            }
        }
    }
    tasks.named('mergeReleaseResources').configure {
        doLast {
            def mergedValues = file("${buildDir}/intermediates/merged_res/release/mergeReleaseResources/values/values.xml")
            if (mergedValues.exists()) {
                def content = mergedValues.getText('UTF-8')
                def pattern = (~/(?s)<attr[^>]*name="actionBarSize"[^>]*>.*?<\/attr>/)
                def matcher = pattern.matcher(content)
                def sb = new StringBuffer()
                int count = 0
                while (matcher.find()) {
                    count++
                    if (count > 1) {
                        matcher.appendReplacement(sb, '')
                    } else {
                        matcher.appendReplacement(sb, matcher.group())
                    }
                }
                matcher.appendTail(sb)
                if (count > 1) {
                    mergedValues.write(sb.toString(), 'UTF-8')
                }
            }
        }
    }
}

dependencies {
    implementation 'androidx.annotation:annotation:1.8.2'
    implementation 'com.jakewharton.timber:timber:5.0.1'
    implementation 'commons-codec:commons-codec:1.17.0'
    implementation 'org.apache.commons:commons-lang3:3.14.0'
    implementation 'ca.uhn.hapi.fhir:hapi-fhir-base:6.10.1'
    implementation 'ca.uhn.hapi.fhir:hapi-fhir-structures-r4:6.10.1'
    implementation 'io.github.bluecodesystems:opensrp-client-core:6.2.0'
    implementation 'io.github.bluecodesystems:android-p2p-sync:0.4.1'
    implementation 'io.github.bluecodesystems:opensrp-plan-evaluator:1.7.0'
}
